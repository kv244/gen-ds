/*******************************************************************

This is a simple key-value (integer-string) store
Demonstrate loading classes dynamically, serialization,
interfaces, custom exceptions, testing, logger.

There will be separate engines implementing the operations.
Engines storage will be different and marked by a magic.

Current main is for testing but will be replaced by shell 
(taking arguments).

Maybe MT later.

Operations:
- add value
- delete value
	- add + delete = replace
- change store (file)
- change engine (data struct and likely file format)
	from the shell 
	
- to determine:

	- change store will attempt to load the store
	(currently defined - either default or other
	if changed); this will delete what is in memory, if anything
	
	- saving will attempt to commit to disk
		commit operation defined too; this will delete what is on
		disk, if anything, even if current store is not as loaded from
					
Engine should maintain metadata:
	- size (ok needed)
	- last search time / items

Key index should be per engine - eg array cant take -1 but hash can.	
The shell cannot support multiple active engines but a client application can.	
*******************************************************************/

TODO
- try iterator for the ArrayList and see if there is scope 
	for refactoring (see TODO's for iterator at HashStruct)
- add iterator to interface and then to driver